/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.90
 * Generated at: 2023-07-14 03:25:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import vo.ProductVO;
import dao.ProductRepository;

public final class addCart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("dao.ProductRepository");
    _jspx_imports_classes.add("vo.ProductVO");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// form : product.jsp
	// to   : post방식으로 addCart.jsp?productId=P1234
	String productId = request.getParameter("productId");	//P1234
	
	out.print("productId : " + productId + "<br>");
	
	// trim() : 공백제거
	// addCart.jsp  or  addCart.jsp?productId=
	if(productId == null || productId.trim().equals("")) {
		response.sendRedirect("products.jsp");
		return;
	}
	
	// 기본키인 P1234 코드의 상품을 찾아보자
	// 싱글톤 패턴으로 공유되어 있는 객체를 1회 생성
	ProductRepository dao = ProductRepository.getInstance();
	
	// select * from product where id = 'P1234'
	ProductVO prod = dao.getProductById(productId);
	
	// 만약 상품 결과가 없으면
	if(prod == null) {
		// [상품이 없음] 예외처리 페이지로 강제 이동
		response.sendRedirect("exceptionNoProductId.jsp");
	}
	
	// 상품이 있으면 계속 실행
	// 장바구니(세션) => 세션명 : cartlist
	ArrayList<ProductVO> list = (ArrayList<ProductVO>)session.getAttribute("cartlist");
	
	// 장바구니가 없으면 생성
	if(list == null) {
		// list는 null이므로 여기서 리스트를 생성해줘야 함
		list = new ArrayList<ProductVO>();
		// cartlist라는 세션명으로 생성
		session.setAttribute("cartlist", list);
	}

	int cnt = 0;
	// 장바구니가 있다면 다음을 실행

	// 1) 장바구니에 P1234 상품이 이미 들어있는 경우
	// private int quantity;	// 장바구니에 담은 개수 
	// quantitiy를 1 증가
	for(int i=0; i<list.size(); i++) {
		// list는 P1234, P1235, P1236
		// list.get(0).getProductId().equals("P1234")
		if(list.get(i).getProductId().equals(productId)) {
			cnt++;	// 장바구니에 넣을 상품을 찾았다면 1증가
			// 장바구니에 상품이 이미 들어있다면 장바구니에 담은 개수를 1 증가
			// list.get(i) : productVO
			list.get(i).setQuantity(list.get(i).getQuantity()+1);
		}
	}
	
	// 2) 장바구니에 P1234 상품이 없는 경우
	if(cnt==0) {
		// 장바구니에 P1234 상품을 넣어주고
		list.add(prod);
		// quantity를 1로 처리
		prod.setQuantity(1);
	}
	
	// 장바구니 확인
	// ArrayList<ProductVO> : list
	for(ProductVO vo : list) {
		out.print("vo : " + vo + "<br/><hr/>");
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
