/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.90
 * Generated at: 2023-07-05 01:13:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.commons.fileupload.FileItem;
import java.util.Iterator;
import org.apache.commons.fileupload.DiskFileUpload;
import java.util.List;
import dao.ProductRepository;
import vo.ProductVO;
import java.io.File;

public final class processAddProduct_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("org.apache.commons.fileupload.DiskFileUpload");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileItem");
    _jspx_imports_classes.add("dao.ProductRepository");
    _jspx_imports_classes.add("vo.ProductVO");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("                             \r\n");
      out.write("   \r\n");
      out.write("                                 \r\n");
      out.write("                          \r\n");
      out.write("                                   \r\n");
      out.write("\r\n");
      out.write("<!-- 폼 필드\r\n");
      out.write("요청URL : processAddProduct.jsp\r\n");
      out.write("요청방식 : post\r\n");
      out.write("요청파라미터(HTTP파라미터, QueryString) :\r\n");
      out.write("	{productId=P1237, pname=에어팟3, unitPrice=200000,\r\n");
      out.write("	description=굿음질, manufacturer=Apple, category=Tablet,\r\n");
      out.write("	unitsInStock=1000, condition=Old}\r\n");
      out.write("-->\r\n");
      out.write("		\r\n");
	//스크립틀릿
	//폼 페이지에서 입력된 데이터를 서버로 전송 시 한그링 깨지지 않도록 문자 인코딩 유형을 UTF-8로 하여
	//request 내장 객체의 모든 파라미터의 인코딩을 UTF-8로 처리
	request.setCharacterEncoding("UTF-8");
	//이미지 파일을 어디에 올릴건지
	String path = "C://eclipse202006//workspace//JSPBook//WebContent//images";
	//파일업로드 처리용 클래스
	DiskFileUpload upload = new DiskFileUpload();
	//환경설정
	upload.setSizeMax(1000000);	//최대 1M
	upload.setSizeThreshold(4096);	//1 * 1024 * 1024 => 1M
	upload.setRepositoryPath(path);	//임시저장(생략가능)
	//form데이터들을 items로 변환(파싱-의미분석, 구문분석)
	List items = upload.parseRequest(request);
	Iterator params = items.iterator();	//열거형
	
	//폼 페이지에서 입력도니 값들을 얻어오기 위해서 request 내장 객체의 getParameter() 메소드를 작성
	//파라미터의 모든 값의 데이터 타입은 String타입!
	String productId     = ""; 
	String pname         = ""; 
	String unitPrice     = ""; 
	String description   = ""; 
	String manufacturer  = ""; 
	String category      = ""; 
	String unitsInStock  = ""; 
	String condition     = ""; 
	
	int price = 0;
	
	//폼 페이지에서 상품 재고 수가 입력되지 않은 경우 0으로, 입력된 경우 int형으로 변경
	//int타입의 허용 범위 : –2,147,483,648 ~ 2,147,483,647
	int stock = 0;
	
	String fileFieldName = "";
	String fileName = "";	 
	String contentType = "";  
	Long   fileSize = 0L; 	 
	
	while(params.hasNext()) {
		FileItem item = (FileItem)params.next();	//다음이 있으면 데이터를 가져와라
		if(item.isFormField()) {  //일반항목
			//item : {productId=P1234}
			String name = item.getFieldName();
			//productId -> pname -> unitPrice -> description
			//	-> manufacturer -> category -> unitsInStock -> condition
			if(name.equals("productId")) {
				productId = item.getString("utf-8"); //P1234
			} else if(name.equals("pname")) {
				pname = item.getString("utf-8"); //에어팟3
			} else if(name.equals("unitPrice")) {
				unitPrice = item.getString("utf-8"); //200000
				price = Integer.parseInt(unitPrice);
			} else if(name.equals("description")) {
				description = item.getString("utf-8"); //굿음질
			} else if(name.equals("manufacturer")) {
				manufacturer = item.getString("utf-8"); //Apple
			} else if(name.equals("category")) {
				category = item.getString("utf-8"); //Tablet
			} else if(name.equals("unitsInStock")) {
				unitsInStock = item.getString("utf-8"); //1000
				stock = Integer.parseInt(unitsInStock);
			} else if(name.equals("condition")) {
				condition = item.getString("utf-8"); //Old
			}

		} else {  //파일객체
			fileFieldName = item.getFieldName(); //productImage
			fileName 	  = item.getName(); //(파일 저장된 경로)\\~~~.jpg
			fileName = fileName.substring(fileName.lastIndexOf("\\")+1);
			contentType   = item.getContentType();	//MIME타입 : images/jpeg
			fileSize 	  = item.getSize();
			
			// 설계 => 복사될 위치, 파일명(결합연산자)
			File file = new File(path + "\\" + fileName);
			//설계대로 복사 실행
			item.write(file);
		}
		
	}
	
	//넘어온 파라미터값들을 -> ProductVO productVO 객체에 setting 해보자
	ProductVO productVO = new ProductVO();
	productVO.setProductId(productId);
	productVO.setPname(pname);
	productVO.setUnitPrice(price);
	productVO.setDescription(description);
	productVO.setManufacturer(manufacturer);
	productVO.setCategory(category);
	productVO.setUnitsInStock(stock);
	productVO.setCondition(condition);
	productVO.setFilename(fileName);  //P1237.jpg
	
	out.print("productVO : " + productVO);
	
	ProductRepository dao = ProductRepository.getInstance();
	//폼 페이지에서 입력된 데이터를 저장하도록 ProductRepository 클래스의 addProduct() 메소드를 호출
	dao.addProduct(productVO);
	//모든 상품 목록을 리턴
	List<ProductVO> listOfProducts = dao.getAllProducts();
	//향상된 for문
	for(ProductVO vo :listOfProducts) {
		out.print("<p>" + vo + "</p>");
	}
	//목록으로 강제 이동. response 내장 객체의 sendRedirect()
	response.sendRedirect("products.jsp");
	

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
