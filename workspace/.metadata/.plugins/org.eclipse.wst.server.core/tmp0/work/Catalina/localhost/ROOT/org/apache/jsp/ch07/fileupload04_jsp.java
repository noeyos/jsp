/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.90
 * Generated at: 2023-07-04 02:45:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch07;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class fileupload04_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/js/jquery-3.6.0.js\"></script>\r\n");
      out.write("<title>File Upload</title>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("// document내 모든 요소가 로딩된 후 실행\r\n");
      out.write("$(function(){\r\n");
      out.write("	console.log(\"개똥이\");\r\n");
      out.write("	// 이미지 미리보기 시작.	handleImgFileSelect : 콜백함수\r\n");
      out.write("	$('#uploadFile').on(\"change\", handleImgFileSelect);\r\n");
      out.write("	// e : onchange 이벤트를 받아오는 객체\r\n");
      out.write("	function handleImgFileSelect(e) {\r\n");
      out.write("		// e.target : <input type=\"file\"...\r\n");
      out.write("		let files = e.target.files;\r\n");
      out.write("		// multiple일때처럼 이미지가 여러개가 있을 수 있음\r\n");
      out.write("		// 이미지들을 각각 분리해서 배열로 만듦\r\n");
      out.write("		let fileArr = Array.prototype.slice.call(files);	// 파일들을(Object) 잘라서 Call한다\r\n");
      out.write("		// 파일 타입의 배열 반복.	f : 배열 안에 들어있는 각각의 이미지 파일 객체 1개\r\n");
      out.write("		// for(ProductVO vo : productVOList)\r\n");
      out.write("		fileArr.forEach(function(f){\r\n");
      out.write("			// 이미지 파일이 아닌 경우 이미지 미리보기 실패 처리(MIME타입으로 체킹)\r\n");
      out.write("			if(!f.type.match(\"image.*\")){	// 이미지가 아닌 경우\r\n");
      out.write("				alert(\"이미지 확장자만 가능합니다.\");\r\n");
      out.write("				// handleImgFileSelect 함수 종료\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("			// 이미지 객체를 읽을 자바스크립트의 reader 객체 생성\r\n");
      out.write("			let reader = new FileReader();\r\n");
      out.write("			// e : reader가 이미지 파일을 읽는 이벤트\r\n");
      out.write("			reader.onload = function(e) {\r\n");
      out.write("				// e.target ==> f(이미지 객체)\r\n");
      out.write("				// e.target.result : reader가 이미지를 다 읽은 결과\r\n");
      out.write("				let img_html = \"<img src='\" + e.target.result + \"' style='width:100%;'/>\";\r\n");
      out.write("				// <p> 태그 사이에 이미지가 렌더링되어 화면에 보임\r\n");
      out.write("				// 객체.append : (이미지) 누적\r\n");
      out.write("				// 객체.html() : 새로고침(덮어쓰기) == 객체.innerHTML : JavaScript\r\n");
      out.write("				$(\"#pImg\").append(img_html);\r\n");
      out.write("			}\r\n");
      out.write("			// 이미지 파일 객체(f)를 읽음\r\n");
      out.write("			reader.readAsDataURL(f);	// 파일 객체를 데이터로써 읽겠다\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!--\r\n");
      out.write("파일 업로드 패키지인 Commons-FileUpload는 서버의 메모리상에서 파일 처리가 가능하도록 지원함\r\n");
      out.write("이 패키지는 Common-io 패키지를 바탕으로 작성되었으므로 웹 브라우저(크롬)에서 서버(톰켓)로\r\n");
      out.write("파일을 업로드하기 위해 오픈 라이브러리 commons-fileupload.jar, commons-io.jar 파일을 사용\r\n");
      out.write("JSP 페이지에 page 디렉티브 태그의 import 속성을 사용하여 피키지를 임포트 함\r\n");
      out.write("lib 폴더에 해당 jar를 넣어주면 됨\r\n");
      out.write("-->\r\n");
      out.write("\r\n");
      out.write("<!--\r\n");
      out.write("	파일 업로드를 위한 폼 태그에 method속성 값은 무조건 post,\r\n");
      out.write("		enctype 속성 값은 무조건 multipart/form-data,\r\n");
      out.write("		업로드된 파일을 처리하기 위한 action 속성 값을 작성\r\n");
      out.write("		<input type=\"file\" ... >\r\n");
      out.write("-->\r\n");
      out.write("<form action=\"fileupload04_process.jsp\" method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("	<!-- FormField 추가 --> <!-- required == not null(Constraints제약사항) == 필수 == mandatory -->\r\n");
      out.write("	<p>이름 : <input type=\"text\" name=\"name\" required\"></p>\r\n");
      out.write("	<p>제목 : <input type=\"text\" name=\"subject\" required></p>\r\n");
      out.write("	<!-- 파일을 입력받도록 input 태그의 type 속성 값을 file로 작성하고, name 속성을 작성함 -->\r\n");
      out.write("	<p>파일 : <input type=\"file\" id=\"uploadFile\" name=\"filename\" multiple /></p><!-- item -->\r\n");
      out.write("	<!-- 입력된 데이터를 서버로 전송하도록 input 태그의 type 속성 값을 submit으로 작성 -->\r\n");
      out.write("	<!-- 이미지 미리보기 -->\r\n");
      out.write("	<p id=\"pImg\"></p>\r\n");
      out.write("	<p><input type=\"submit\" value=\"파일 올리기\" /></p>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
