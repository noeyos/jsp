/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.90
 * Generated at: 2023-07-06 01:39:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch08;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class validation05_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Validation</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- body와 body 사이를 document라고 함 -->\r\n");
      out.write("	<h3>회원 가입</h3>\r\n");
      out.write("	<!--\r\n");
      out.write("		요청URL : validation-5+process.jsp\r\n");
      out.write("		요청파라미터 : {id=a001, passwd=1234, name=개똥이, phone1=010, phone2=1234, phone3=1234,\r\n");
      out.write("		email=test@test.co.kr}\r\n");
      out.write("		요청방식 : post\r\n");
      out.write("	-->\r\n");
      out.write("	<form name=\"Member\" action=\"validation05_process.jsp\" method=\"post\">\r\n");
      out.write("		<p>아이디: <input type=\"text\" name=\"id\" required></p>\r\n");
      out.write("		<p>비밀번호: <input type=\"text\" name=\"passwd\" required></p>\r\n");
      out.write("		<p>이름: <input type=\"text\" name=\"name\" required></p>\r\n");
      out.write("		<p>연락처:\r\n");
      out.write("			<select name=\"phone1\">\r\n");
      out.write("				<option value=\"010\">010</option>\r\n");
      out.write("				<option value=\"011\">011</option>\r\n");
      out.write("				<option value=\"016\">016</option>\r\n");
      out.write("				<option value=\"017\">017</option>\r\n");
      out.write("				<option value=\"019\">019</option>\r\n");
      out.write("			</select> -\r\n");
      out.write("			<input type=\"text\" maxlength=\"4\" size=\"4\" name=\"phone2\" /> -\r\n");
      out.write("			<input type=\"text\" maxlength=\"4\" size=\"4\" name=\"phone3\" />\r\n");
      out.write("		</p>\r\n");
      out.write("		<p>이메일 : <input type=\"text\" name=\"email\" /></p>\r\n");
      out.write("		<!-- checkMember(): 핸들러함수   -->\r\n");
      out.write("		<p><input type=\"button\" value=\"전송\" onclick=\"checkMember();\"></p>\r\n");
      out.write("	</form>\r\n");
      out.write("<script>\r\n");
      out.write("	function checkMember() {\r\n");
      out.write("		\r\n");
      out.write("		// 정규식은 '/'로 시작해서 '/'로 끝남		\r\n");
      out.write("		\r\n");
      out.write("		// 1) 아이디는 문자로 시작\r\n");
      out.write("		let regExpId = /^[a-z|A-Z|ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;\r\n");
      out.write("		\r\n");
      out.write("		// 2) 이름은 한글만 입력 - 시작도 한글, 끝도 한글. ^한글$\r\n");
      out.write("		//     + : 한번 이상.   * : 0번 이상\r\n");
      out.write("		let regExpName = /^[가-힣]*$/;\r\n");
      out.write("		\r\n");
      out.write("		// 3) 비밀번호는 숫자만 입력\r\n");
      out.write("		let regExpPasswd = /^[0-9]*$/;\r\n");
      out.write("		\r\n");
      out.write("		// 4) 연락처 형식 준수(010-1111-2222, 010-111-2222)\r\n");
      out.write("		// '\\d' : 숫자.\r\n");
      out.write("		// 숫자{3} : 숫자가 딱 3회 반복.\r\n");
      out.write("		let regExpPhone = /^\\d{3}-\\d{3,4}-\\d{4}$/;\r\n");
      out.write("		\r\n");
      out.write("		// 5) 이메일 형식 준수(tester-_.2a@korea_3.ac.kr)\r\n");
      out.write("		// ^ : 시작   /   $ : 끝    /   ? : 있어도 그만 없어도 그만   /  * : 0 이상 반복\r\n");
      out.write("		// {2, 3} : 2 이상 3 이하\r\n");
      out.write("		// [a-z] : a부터 z사이 영소문자 중 한 글자\r\n");
      out.write("		let regExpEmail = \r\n");
      out.write("		/^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i ;\r\n");
      out.write("		\r\n");
      out.write("		// form : object\r\n");
      out.write("		let form = document.Member;\r\n");
      out.write("		\r\n");
      out.write("		let id = form.id.value;   		//아이디\r\n");
      out.write("		let passwd = form.passwd.value; //비밀번호\r\n");
      out.write("		let name = form.name.value;		//이름\r\n");
      out.write("		let phone = form.phone1.value + \"-\" +\r\n");
      out.write("					form.phone2.value + \"-\" +\r\n");
      out.write("					form.phone3.value;	// 연락처\r\n");
      out.write("		let email = form.email.value;	// 이메일   	\r\n");
      out.write("		\r\n");
      out.write("		// 1) 아이디는 문자로 시작\r\n");
      out.write("		if(!regExpId.test(id)) {\r\n");
      out.write("			alert(\"아이디는 문자로 시작해주세요\");\r\n");
      out.write("			form.id.select();\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 2) 이름은 한글만 입력\r\n");
      out.write("		if(!regExpName.test(name)) {\r\n");
      out.write("			alert(\"이름은 한글만 입력해주세요\");\r\n");
      out.write("			form.name.select();\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		// 3) 비밀번호는 숫자만 입력\r\n");
      out.write("		if(!regExpPasswd.test(passwd)) {\r\n");
      out.write("			alert(\"비밀번호는 숫자만 입력해주세요\");\r\n");
      out.write("			form.passwd.select();\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		// 4) 전화번호 형식을 준수\r\n");
      out.write("		if(!regExpPhone.test(phone)) {\r\n");
      out.write("			alert(\"전화번호 형식을 준수해주세요\");\r\n");
      out.write("			form.phone.select();\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		// 5) 이메일 형식을 준수\r\n");
      out.write("		if(!regExpEmail.test(email)) {\r\n");
      out.write("			alert(\"이메일 형식을 준수해주세요\");\r\n");
      out.write("			form.email.select();\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		//유효성 검사(validation) 통과\r\n");
      out.write("	    form.submit();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
