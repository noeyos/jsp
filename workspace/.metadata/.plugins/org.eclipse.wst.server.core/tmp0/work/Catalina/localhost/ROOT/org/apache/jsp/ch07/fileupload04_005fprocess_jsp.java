/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.90
 * Generated at: 2023-07-04 01:44:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch07;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.File;
import org.apache.commons.fileupload.DiskFileUpload;
import java.util.List;
import java.util.Iterator;
import org.apache.commons.fileupload.FileItem;

public final class fileupload04_005fprocess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.apache.commons.fileupload.DiskFileUpload");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileItem");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
	// 스크립틀릿
	// 폼 페이지에서 전송된 파일을 저장할 서버의 경로를 작성
	String path = "c:\\upload";
	// Commons-Fileupload.jar를 이용
	// 해당 패키지에 포함되어있음
	DiskFileUpload upload = new DiskFileUpload();
	// 업로드 환경설정
	upload.setSizeMax(10000000);	// 업로드 가능 최대 크기(bytes)
	upload.setSizeThreshold(4096);	// 메모리상에 저장할 최대 크기(bytes)
	upload.setRepositoryPath(path);	// 업로드될 파일을 임시로 저장할 경로
	// 폼 페이지에서 전송된 multipart/form 유형의 요청 파라미터 -> parseRequest()메소드로 전달받음
	List items = upload.parseRequest(request);
	// Iterator 클래스로 변환
	Iterator params = items.iterator();
	// 폼 페이지에서 전송된 요청 파라미터가 없을 때까지 반복
	while(params.hasNext()) {
		// params.next()는 Object로 리턴 
		FileItem item = (FileItem)params.next();
		// 요청 파라미터가 일반 데이터인지 
		if(item.isFormField()){	// 일반 데이터(<input type="text"..)
			String name = item.getFieldName();	// [name=개똥이]에서 name
			String value = item.getString("utf-8");	// 파라미터 값. [name=개똥이]에서 개똥이
			out.print("<p>" + name + "=" + value + "</p>");
		} else { // 파일인지<input type="file"
			String fileFieldName = item.getFieldName();	// 요청 파라미터 이름[filename=파일객체]에서 filename
			String fileName = item.getName();	// 저장 파일의 이름	/ item => 파일 자체라고 생각하면 됨
			String contentType = item.getContentType();	// MIME 타입. 콘텐츠 유형.
			// 업로드 대상 => (경로)\\(파일명).(확장자)
			fileName = fileName.substring(fileName.lastIndexOf("\\") + 1);
			long fileSize = item.getSize();	// 파일 크기 정도
			// item(JSP) -> MultipartFile(Spring)
			// 이곳으로 업로드 => c:\\upload
			File file = new File(path + "/" + fileName);
			// 설계대로 복사 실행
			item.write(file);
			
			out.print("<p>---------------------------------------------------</p>");
			out.print("<p>요청 파라미터 이름 : "+ fileFieldName +"</p>");
			out.print("<p>저장 파일 이름 : "+ fileName +"</p>");
			out.print("<p>파일 컨텐츠 : "+ contentType +"</p>");
			out.print("<p>파일 크기 : "+ fileSize +"</p>");
			out.print("<p>---------------------------------------------------</p>");
		}
	}

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
