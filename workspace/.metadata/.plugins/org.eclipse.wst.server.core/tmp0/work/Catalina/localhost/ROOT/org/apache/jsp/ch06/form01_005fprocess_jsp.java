/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.90
 * Generated at: 2023-06-30 03:29:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch06;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class form01_005fprocess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!-- 요청URL : form01_process.jsp\r\n");
      out.write("		요청방식 : post\r\n");
      out.write("		요청파라미터(HTTP파라미터 = QueryString) :\r\n");
      out.write("			{id=a001, passwd=java, name=개똥이, phone=010-1234-1234, id=\"hobby1\"\r\n");
      out.write("				gender=female, hobby={reading,exercise},\r\n");
      out.write("				comment=가입할게요}\r\n");
      out.write("-->\r\n");
	//스크립틀릿
	//request객체의 encoding 처리
	request.setCharacterEncoding("utf-8");
	
	//모든 파라미터의 타입은 String 타입
	String id      = request.getParameter("id");
	String passwd  = request.getParameter("passwd");
	String name    = request.getParameter("name");
	String phone1  = request.getParameter("phone1");
	String phone2  = request.getParameter("phone2");
	String phone3  = request.getParameter("phone3");
	String gender  = request.getParameter("gender");
	//hobby={reading,exercise}
	//배열에 저장된 취미 값을 문자타입 배열로 저장
	String[] hobby   = request.getParameterValues("hobby");
	String comment = request.getParameter("comment");
	

      out.write("\r\n");
      out.write("<p>아이디 : ");
      out.print( id );
      out.write("</p>		\r\n");
      out.write("<p>비밀번호 : ");
      out.print( passwd );
      out.write("</p>		\r\n");
      out.write("<p>이름 : ");
      out.print( name );
      out.write("</p>\r\n");
      out.write("<p>연락처 : ");
      out.print( phone1 );
      out.write(' ');
      out.write('-');
      out.write(' ');
      out.print( phone2 );
      out.write(' ');
      out.write('-');
      out.write(' ');
      out.print( phone3 );
      out.write("</p>\r\n");
      out.write("<p>성별 : ");
      out.print( gender );
      out.write("</p>		\r\n");
      out.write("<p>취미 :\r\n");
      out.write("	");

		//체크박스의 특성상 체크를 하지 않았을 경우 실행 안 함
		if(hobby!=null) {
			//String[] hobby
			for(String str : hobby) {
				out.print(" " + str);
			}
		}
	
      out.write("\r\n");
      out.write("</p>\r\n");
      out.write("<p>가입 인사 : ");
      out.print( comment );
      out.write("</p>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
