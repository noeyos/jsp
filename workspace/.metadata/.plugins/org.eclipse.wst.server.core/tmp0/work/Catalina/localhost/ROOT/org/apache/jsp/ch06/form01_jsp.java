/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.90
 * Generated at: 2023-06-30 03:43:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch06;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class form01_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Form Processing</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h3>회원가입</h3>\r\n");
      out.write("	<!-- 폼태그, 폼필드\r\n");
      out.write("	action생략 시 본인 페이지를 요청\r\n");
      out.write("	method 생략 시 기본 HTTP요청방식은 get\r\n");
      out.write("	-->\r\n");
      out.write("	<!-- 요청URL : form01_process.jsp\r\n");
      out.write("		요청방식 : post\r\n");
      out.write("		요청파라미터(HTTP파라미터 = QueryString) :\r\n");
      out.write("			{id=a001, passwd=java, name=개똥이, phone=010-1234-1234, id=\"hobby1\"\r\n");
      out.write("				gender=female, hobby={reading,exercise},\r\n");
      out.write("				comment=가입할게요}\r\n");
      out.write("	-->\r\n");
      out.write("	<form action=\"form01_process.jsp\" name=\"member\" method=\"post\" onsubmit=\"return fn_chk()\">\r\n");
      out.write(" 		<!-- 폼 데이터 -->\r\n");
      out.write(" 		<p>아이디 : <input type=\"text\" name=\"id\" /></p>		\r\n");
      out.write(" 		<p>비밀번호 : <input type=\"password\" name=\"passwd\" /></p>		\r\n");
      out.write(" 		<p>이름 : <input type=\"text\" name=\"name\" /></p>\r\n");
      out.write(" 		<p>연락처 : \r\n");
      out.write(" 			<select name=\"phone1\">\r\n");
      out.write(" 				<option value=\"010\" selected>010</option>\r\n");
      out.write(" 				<option value=\"011\">011</option>\r\n");
      out.write(" 				<option value=\"016\">016</option>\r\n");
      out.write(" 				<option value=\"017\">017</option>\r\n");
      out.write(" 				<option value=\"019\">019</option>\r\n");
      out.write(" 			</select> -\r\n");
      out.write(" 			<!-- checkInputNum() : 핸들러함수 --> \r\n");
      out.write(" 			<input type=\"text\" maxlength=\"4\" size=\"4\" name=\"phone2\" \r\n");
      out.write(" 				onkeypress=\"checkInputNum()\"/> -\r\n");
      out.write(" 			<input type=\"text\" maxlength=\"4\" size=\"4\" name=\"phone3\" \r\n");
      out.write(" 				onkeypress=\"checkInputNum()\"/>\r\n");
      out.write(" 		</p>\r\n");
      out.write(" 		<p>성별 : \r\n");
      out.write(" 			<input type=\"radio\" name=\"gender\" id=\"male\" value=\"male\">\r\n");
      out.write(" 				<label for=\"male\">남성</label>\r\n");
      out.write(" 			<input type=\"radio\" name=\"gender\" id=\"female\" value=\"female\" checked>\r\n");
      out.write(" 				<label for=\"female\">여성</label>\r\n");
      out.write(" 		</p>		\r\n");
      out.write(" 		<p>취미 : \r\n");
      out.write(" 			<input type=\"checkbox\" id=\"hobby1\" name=\"hobby\" value=\"reading\">\r\n");
      out.write(" 				<label for=\"hobby1\">독서</label>\r\n");
      out.write(" 			<input type=\"checkbox\" id=\"hobby2\" name=\"hobby\" value=\"coding\">\r\n");
      out.write(" 				<label for=\"hobby2\">코딩</label>\r\n");
      out.write(" 			<input type=\"checkbox\" id=\"hobby3\" name=\"hobby\" value=\"exercise\">\r\n");
      out.write(" 				<label for=\"hobby3\">운동</label>\r\n");
      out.write(" 		</p>\r\n");
      out.write(" 		<p>\r\n");
      out.write(" 			<!-- rows : 줄수 / cols : 열수\r\n");
      out.write(" 			wrap=\"off\" : 줄바꿈 안 함, \"soft\" : 자동 줄 바꿈,\r\n");
      out.write(" 			\"hard\" : 서버전송 시 캐리지 리턴 문자를 전달\r\n");
      out.write(" 			-->\r\n");
      out.write(" 			<textarea name=\"comment\" rows=\"3\" cols=\"30\" wrap=\"off\" \r\n");
      out.write(" 				placeholder=\"가입인사를 입력해주세요\"></textarea>\r\n");
      out.write(" 		</p>\r\n");
      out.write(" 		<p><input type=\"submit\" value=\"가입하기\"/></p>\r\n");
      out.write(" 		<p>다시쓰기</p>		\r\n");
      out.write("	</form>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	function fn_chk() {\r\n");
      out.write("		let form = document.member;\r\n");
      out.write("		//isNaN : is Not a Number(이것은 숫자가 아니다)\r\n");
      out.write("		if(isNaN(form.phone2.value)) {\r\n");
      out.write("			alert(\"휴대폰 번호는 숫자만 입력 가능합니다.\")\r\n");
      out.write("			form.phone2.select();	// 커서를 해당 요소에 위치\r\n");
      out.write("			// false이면 submit 안 됨\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		if(isNaN(form.phone3.value)) {\r\n");
      out.write("			alert(\"휴대폰 번호는 숫자만 입력 가능합니다.\")\r\n");
      out.write("			form.phone2.select();	// 커서를 해당 요소에 위치\r\n");
      out.write("			// false이면 submit 안 됨\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		// if 조건을 모두 통과해야 submit 됨\r\n");
      out.write("		return true;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 숫자만 입력할 수 있도록 처리\r\n");
      out.write("	function checkInputNum() {\r\n");
      out.write("		// 48 : ascii코드의 0, 57 : ascii코드의 9\r\n");
      out.write("		if((event.keyCode<48)||(event.keyCode>57)) {\r\n");
      out.write("			event.returnValue = false;\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
